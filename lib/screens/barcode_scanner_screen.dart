import 'package:flutter/material.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:winekeeper/core/app_theme.dart';
import 'package:winekeeper/models/wine_card.dart';
import 'package:winekeeper/models/wine_bottle.dart';
import 'package:winekeeper/models/sale_record.dart';
import 'package:winekeeper/models/audit_session.dart';

class BarcodeScannerScreen extends StatefulWidget {
  final String? mode; // 'add', 'sell', –∏–ª–∏ 'audit'
  final WineCard? wineCard; // –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
  final AuditSession? auditSession; // –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–≤–∏–∑–∏–∏

  const BarcodeScannerScreen({
    super.key,
    this.mode,
    this.wineCard,
    this.auditSession,
  });

  @override
  State<BarcodeScannerScreen> createState() => _BarcodeScannerScreenState();
}

class _BarcodeScannerScreenState extends State<BarcodeScannerScreen> {
  MobileScannerController cameraController = MobileScannerController();
  bool _screenOpened = false;

  @override
  void initState() {
    super.initState();
    _screenOpened = false;
  }

  @override
  void dispose() {
    cameraController.dispose();
    super.dispose();
  }

  String get _screenTitle {
    switch (widget.mode) {
      case 'sell':
        return '–ü—Ä–æ–¥–∞—Ç—å –±—É—Ç—ã–ª–∫—É';
      case 'add':
        return '–î–æ–±–∞–≤–∏—Ç—å –±—É—Ç—ã–ª–∫—É';
      case 'audit':
        return '–†–µ–≤–∏–∑–∏—è –≤–∏–Ω–æ—Ç–µ–∫–∏';
      default:
        return '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥';
    }
  }

  String get _instructionText {
    switch (widget.mode) {
      case 'sell':
        return '–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥\n–±—É—Ç—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏';
      case 'add':
        return '–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥\n–Ω–æ–≤–æ–π –±—É—Ç—ã–ª–∫–∏';
      case 'audit':
        return '–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ –≤—Å–µ –±—É—Ç—ã–ª–∫–∏\n–≤ –≤–∏–Ω–æ—Ç–µ–∫–µ –¥–ª—è —Ä–µ–≤–∏–∑–∏–∏';
      default:
        return '–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        title: Column(
          children: [
            Text(_screenTitle),
            if (widget.mode == 'audit' && widget.auditSession != null) ...[
              const SizedBox(height: 4),
              Text(
                '–ü—Ä–æ–≥—Ä–µ—Å—Å: ${widget.auditSession!.totalScanned} –∏–∑ ${widget.auditSession!.totalExpected}',
                style: TextStyle(
                  fontSize: 12,
                  fontWeight: FontWeight.normal,
                  color: Colors.grey.shade600, // –ó–∞–º–µ–Ω–∏–ª–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ü–≤–µ—Ç
                ),
              ),
            ],
          ],
        ),
        backgroundColor: const Color(0xFFFAF5EF),
        foregroundColor: const Color(0xFF362C2A),
        elevation: 0,
        actions: [
          IconButton(
            icon: const Icon(Icons.flash_on),
            onPressed: () => cameraController.toggleTorch(),
          ),
          IconButton(
            icon: const Icon(Icons.flip_camera_ios),
            onPressed: () => cameraController.switchCamera(),
          ),
          if (widget.mode == 'audit')
            IconButton(
              icon: const Icon(Icons.check_circle_outline),
              onPressed: _completeAudit,
              tooltip: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≤–∏–∑–∏—é',
            ),
        ],
      ),
      body: Stack(
        children: [
          // –°–∫–∞–Ω–µ—Ä
          MobileScanner(
            controller: cameraController,
            onDetect: _foundBarcode,
          ),
          
          // –û–≤–µ—Ä–ª–µ–π —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
          _buildScannerOverlay(),
          
          // –ö–Ω–æ–ø–∫–∞ —ç–º—É–ª—è—Ü–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
          Positioned(
            bottom: 100,
            left: 20,
            right: 20,
            child: _buildEmulateButton(),
          ),
        ],
      ),
    );
  }

  Widget _buildScannerOverlay() {
    return Container(
      decoration: ShapeDecoration(
        shape: QrScannerOverlayShape(
          borderColor: const Color(0xFFFF857A),
          borderRadius: 20,
          borderLength: 30,
          borderWidth: 5,
          cutOutSize: 250,
        ),
      ),
      child: Container(
        padding: const EdgeInsets.all(20),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            // –í–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.7),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Text(
                _instructionText,
                textAlign: TextAlign.center,
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
            
            // –ù–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.7),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Column(
                children: [
                  const Icon(
                    Icons.qr_code_scanner,
                    color: Colors.white,
                    size: 32,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —à—Ç—Ä–∏—Ö–∫–æ–¥\n–ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–µ–Ω –≤ —Ä–∞–º–∫–µ',
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      color: Colors.white.withOpacity(0.9),
                      fontSize: 14,
                    ),
                  ),
                  if (widget.mode == 'audit' && widget.auditSession != null) ...[
                    const SizedBox(height: 8),
                    Text(
                      '${widget.auditSession!.progressPercent.toStringAsFixed(1)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
                      style: TextStyle(
                        color: Colors.white.withOpacity(0.8),
                        fontSize: 12,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ],
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEmulateButton() {
    return Container(
      width: double.infinity,
      margin: const EdgeInsets.symmetric(horizontal: 40),
      child: ElevatedButton.icon(
        onPressed: _emulateBarcodeScan,
        icon: const Icon(Icons.bug_report, color: Colors.white),
        label: const Text(
          'üêõ –≠–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
          style: TextStyle(color: Colors.white, fontSize: 16),
        ),
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFFFF857A),
          padding: const EdgeInsets.symmetric(vertical: 16),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
      ),
    );
  }

  void _foundBarcode(BarcodeCapture barcodeCapture) {
    if (_screenOpened) return;

    final List<Barcode> barcodes = barcodeCapture.barcodes;
    if (barcodes.isEmpty) return;

    final String? code = barcodes.first.rawValue;
    if (code == null || code.isEmpty) return;

    _processBarcode(code);
  }

  void _emulateBarcodeScan() {
    if (_screenOpened) return;

    String testBarcode;
    
    if (widget.mode == 'audit' || widget.mode == 'sell') {
      // –î–ª—è —Ä–µ–≤–∏–∑–∏–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –Ω—É–∂–µ–Ω —à—Ç—Ä–∏—Ö–∫–æ–¥ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –±—É—Ç—ã–ª–∫–∏
      final bottlesBox = Hive.box<WineBottle>('wine_bottles');
      final existingBottles = bottlesBox.values
          .where((bottle) => bottle.isActive)
          .toList();
      
      if (existingBottles.isEmpty) {
        _showMessage(widget.mode == 'audit' 
          ? '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Ç—ã–ª–æ–∫ –¥–ª—è —Ä–µ–≤–∏–∑–∏–∏' 
          : '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Ç—ã–ª–æ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏');
        return;
      }
      
      // –ë–µ—Ä–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –±—É—Ç—ã–ª–∫–∏
      testBarcode = existingBottles.first.barcode;
    } else {
      // –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —à—Ç—Ä–∏—Ö–∫–æ–¥
      testBarcode = WineBottle.generateTestBarcode();
    }

    _processBarcode(testBarcode);
  }

  void _processBarcode(String barcode) {
    if (_screenOpened) return;
    _screenOpened = true;

    switch (widget.mode) {
      case 'sell':
        _handleSellMode(barcode);
        break;
      case 'add':
        _handleAddMode(barcode);
        break;
      case 'audit':
        _handleAuditMode(barcode);
        break;
      default:
        _handleDefaultMode(barcode);
    }
  }

  void _handleAuditMode(String barcode) {
    final auditBox = Hive.box<AuditSession>('audit_sessions');
    final audit = widget.auditSession;

    if (audit == null) {
      _showMessage('–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —Ä–µ–≤–∏–∑–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // ‚úÖ –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–¨
    if (audit.isBottleScanned(barcode)) {
      _showMessage('üîÑ –≠—Ç–∞ –±—É—Ç—ã–ª–∫–∞ —É–∂–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞\n–ü—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      Future.delayed(const Duration(seconds: 2), () {
        if (mounted) {
          _resetScreen();
        }
      });
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    audit.addScannedBarcode(barcode);

    // –ò—â–µ–º –±—É—Ç—ã–ª–∫—É –≤ –±–∞–∑–µ
    final bottlesBox = Hive.box<WineBottle>('wine_bottles');
    final bottle = bottlesBox.values
        .where((b) => b.barcode == barcode && b.isActive)
        .firstOrNull;

    if (bottle != null) {
      // –ò–∑–≤–µ—Å—Ç–Ω–∞—è –±—É—Ç—ã–ª–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–º
      audit.addFoundBottle(bottle.cardId, barcode);
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      final cardsBox = Hive.box<WineCard>('wine_cards');
      final card = cardsBox.get(bottle.cardId);
      final cardName = card?.name ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞';
      
      _showMessage('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –±—É—Ç—ã–ª–∫–∞\n$cardName\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å: ${audit.totalScanned} –∏–∑ ${audit.totalExpected}');
    } else {
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±—É—Ç—ã–ª–∫–∞
      _showMessage('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±—É—Ç—ã–ª–∫–∞\n–®—Ç—Ä–∏—Ö–∫–æ–¥: $barcode\n\n–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∏–∑ –≤–∞—à–µ–π –≤–∏–Ω–æ—Ç–µ–∫–∏');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    auditBox.put(audit.id, audit);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    Future.delayed(const Duration(seconds: 3), () {
      if (mounted) {
        _resetScreen();
      }
    });
  }

  void _handleSellMode(String barcode) {
    final bottlesBox = Hive.box<WineBottle>('wine_bottles');
    final cardsBox = Hive.box<WineCard>('wine_cards');
    
    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –±—É—Ç—ã–ª–∫—É —Å —Ç–∞–∫–∏–º —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º
    WineBottle? bottle;
    try {
      bottle = bottlesBox.values
          .firstWhere((b) => b.barcode == barcode && b.isActive);
    } catch (e) {
      _showMessage('–ë—É—Ç—ã–ª–∫–∞ —Å —Ç–∞–∫–∏–º —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n–∏–ª–∏ —É–∂–µ –ø—Ä–æ–¥–∞–Ω–∞');
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –≤–∏–Ω–∞
    WineCard? wineCard;
    try {
      wineCard = cardsBox.get(bottle.cardId);
    } catch (e) {
      _showMessage('–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–æ—á–∫–∞ –≤–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    if (wineCard == null) {
      _showMessage('–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–æ—á–∫–∞ –≤–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    _showSellConfirmation(bottle, wineCard);
  }

  void _handleAddMode(String barcode) {
    final bottlesBox = Hive.box<WineBottle>('wine_bottles');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —à—Ç—Ä–∏—Ö–∫–æ–¥
    final existingBottle = bottlesBox.values
        .where((bottle) => bottle.barcode == barcode)
        .firstOrNull;

    if (existingBottle != null) {
      _showMessage('–ë—É—Ç—ã–ª–∫–∞ —Å —Ç–∞–∫–∏–º —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º\n—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ');
      return;
    }

    if (widget.wineCard != null) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
      _addBottleToCard(barcode, widget.wineCard!);
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
      _showCardSelectionDialog(barcode);
    }
  }

  void _handleDefaultMode(String barcode) {
    _showBarcodeInfo(barcode);
  }

  void _completeAudit() async {
    final audit = widget.auditSession;
    if (audit == null) return;

    final result = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFFFAF5EF),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: const Text(
          '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≤–∏–∑–∏—é?',
          style: TextStyle(color: Color(0xFF362C2A)),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${audit.totalScanned} –∏–∑ ${audit.totalExpected} –±—É—Ç—ã–ª–æ–∫',
              style: const TextStyle(color: Color(0xFF362C2A)),
            ),
            Text(
              '–ü—Ä–æ–≥—Ä–µ—Å—Å: ${audit.progressPercent.toStringAsFixed(1)}%',
              style: const TextStyle(color: Color(0xFF362C2A)),
            ),
            if (audit.unknownBottlesCount > 0) ...[
              const SizedBox(height: 8),
              Text(
                '‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${audit.unknownBottlesCount} –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±—É—Ç—ã–ª–æ–∫',
                style: const TextStyle(color: Colors.orange),
              ),
            ],
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context, true),
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFFFF857A), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π —Ü–≤–µ—Ç
            ),
            child: const Text('–ó–∞–≤–µ—Ä—à–∏—Ç—å', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );

    if (result == true) {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≤–∏–∑–∏—é
      audit.complete();
      final auditBox = Hive.box<AuditSession>('audit_sessions');
      await auditBox.put(audit.id, audit);

      if (mounted) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–µ–≤–∏–∑–∏–π
        Navigator.pop(context);
        _showMessage('‚úÖ –†–µ–≤–∏–∑–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      }
    }
  }

  void _showSellConfirmation(WineBottle bottle, WineCard wineCard) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFFFAF5EF),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: const Text(
          '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏',
          style: TextStyle(color: Color(0xFF362C2A)),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(
              Icons.wine_bar,
              size: 64,
              color: Color(0xFFFF857A),
            ),
            const SizedBox(height: 16),
            Text(
              wineCard.name,
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Color(0xFF362C2A),
              ),
            ),
            const SizedBox(height: 8),
            Text(
              wineCard.subtitle,
              style: const TextStyle(color: Color(0xFF362C2A)),
            ),
            const SizedBox(height: 12),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: const Color(0xFFFF857A).withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Text(
                '–®—Ç—Ä–∏—Ö–∫–æ–¥: ${bottle.barcode}',
                style: const TextStyle(
                  fontFamily: 'monospace',
                  color: Color(0xFF362C2A),
                ),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              _resetScreen();
            },
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _confirmSale(bottle, wineCard);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFFFF857A),
            ),
            child: const Text(
              '–ü—Ä–æ–¥–∞—Ç—å',
              style: TextStyle(color: Colors.white),
            ),
          ),
        ],
      ),
    );
  }

  void _showCardSelectionDialog(String barcode) {
    final cardsBox = Hive.box<WineCard>('wine_cards');
    final cards = cardsBox.values.toList();

    if (cards.isEmpty) {
      _showMessage('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –≤–∏–Ω–∞');
      return;
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFFFAF5EF),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: const Text(
          '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –≤–∏–Ω–∞',
          style: TextStyle(color: Color(0xFF362C2A)),
        ),
        content: SizedBox(
          width: double.maxFinite,
          child: ListView.builder(
            shrinkWrap: true,
            itemCount: cards.length,
            itemBuilder: (context, index) {
              final card = cards[index];
              return ListTile(
                leading: CircleAvatar(
                  backgroundColor: const Color(0xFFFF857A).withOpacity(0.1),
                  child: const Icon(
                    Icons.wine_bar,
                    color: Color(0xFFFF857A),
                    size: 20,
                  ),
                ),
                title: Text(card.name),
                subtitle: Text(card.subtitle),
                onTap: () {
                  Navigator.pop(context);
                  _addBottleToCard(barcode, card);
                },
              );
            },
          ),
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              _resetScreen();
            },
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
        ],
      ),
    );
  }

  void _showBarcodeInfo(String barcode) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFFFAF5EF),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: const Text(
          '–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥',
          style: TextStyle(color: Color(0xFF362C2A)),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(
              Icons.qr_code_2,
              size: 64,
              color: Color(0xFFFF857A),
            ),
            const SizedBox(height: 16),
            Text(
              barcode,
              style: const TextStyle(
                fontFamily: 'monospace',
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              _resetScreen();
            },
            child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
          ),
        ],
      ),
    );
  }

  void _confirmSale(WineBottle bottle, WineCard wineCard) {
    final bottlesBox = Hive.box<WineBottle>('wine_bottles');
    
    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±—É—Ç—ã–ª–∫—É
    bottle.isActive = false;
    bottlesBox.put(bottle.id, bottle);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–¥–∞–∂–µ
    final saleRecord = SaleRecord(
      id: SaleRecord.generateId(),
      bottleId: bottle.id,
      cardId: wineCard.id,
      sellerId: 'current_user',
      reason: SaleRecord.REASON_SALE,
      method: SaleRecord.METHOD_SCAN,
    );

    final salesBox = Hive.box<SaleRecord>('sale_records');
    salesBox.put(saleRecord.id, saleRecord);

    _showMessage('–ë—É—Ç—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω–∞!\n${wineCard.name}');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
    Future.delayed(const Duration(seconds: 2), () {
      if (mounted) {
        Navigator.pop(context);
      }
    });
  }

  void _addBottleToCard(String barcode, WineCard wineCard) {
    final bottle = WineBottle(
      id: WineBottle.generateId(),
      barcode: barcode,
      cardId: wineCard.id,
    );

    final bottlesBox = Hive.box<WineBottle>('wine_bottles');
    bottlesBox.put(bottle.id, bottle);

    _showMessage('–ë—É—Ç—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n${wineCard.name}');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
    Future.delayed(const Duration(seconds: 2), () {
      if (mounted) {
        Navigator.pop(context);
      }
    });
  }

  void _showMessage(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          message,
          textAlign: TextAlign.center,
          style: const TextStyle(fontSize: 16),
        ),
        backgroundColor: const Color(0xFF362C2A),
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
        duration: const Duration(seconds: 3),
      ),
    );
  }

  void _resetScreen() {
    setState(() {
      _screenOpened = false;
    });
  }
}

// –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –æ–≤–µ—Ä–ª–µ—è —Å–∫–∞–Ω–µ—Ä–∞
class QrScannerOverlayShape extends ShapeBorder {
  final Color borderColor;
  final double borderWidth;
  final Color overlayColor;
  final double borderRadius;
  final double borderLength;
  final double cutOutSize;

  const QrScannerOverlayShape({
    this.borderColor = Colors.red,
    this.borderWidth = 3.0,
    this.overlayColor = const Color.fromRGBO(0, 0, 0, 80),
    this.borderRadius = 0,
    this.borderLength = 40,
    this.cutOutSize = 250,
  });

  @override
  EdgeInsetsGeometry get dimensions => const EdgeInsets.all(10);

  @override
  Path getInnerPath(Rect rect, {TextDirection? textDirection}) {
    return Path()
      ..fillType = PathFillType.evenOdd
      ..addPath(getOuterPath(rect), Offset.zero);
  }

  @override
  Path getOuterPath(Rect rect, {TextDirection? textDirection}) {
    Path path = Path();
    final double cutOutOffset = (rect.width - cutOutSize) / 2;
    path.addRRect(
      RRect.fromRectAndRadius(
        Rect.fromLTWH(
          cutOutOffset,
          rect.height / 2 - cutOutSize / 2,
          cutOutSize,
          cutOutSize,
        ),
        Radius.circular(borderRadius),
      ),
    );
    return path;
  }

  @override
  void paint(Canvas canvas, Rect rect, {TextDirection? textDirection}) {
    final Paint paint = Paint()
      ..color = overlayColor
      ..style = PaintingStyle.fill;

    canvas.drawPath(
      Path.combine(
        PathOperation.difference,
        Path()..addRect(rect),
        getOuterPath(rect),
      ),
      paint,
    );

    // –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
    final Paint borderPaint = Paint()
      ..color = borderColor
      ..style = PaintingStyle.stroke
      ..strokeWidth = borderWidth;

    final double cutOutOffset = (rect.width - cutOutSize) / 2;
    final Rect cutOutRect = Rect.fromLTWH(
      cutOutOffset,
      rect.height / 2 - cutOutSize / 2,
      cutOutSize,
      cutOutSize,
    );

    // –†–∏—Å—É–µ–º —É–≥–ª—ã —Ä–∞–º–∫–∏
    final double cornerSize = borderLength;
    
    // –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
    canvas.drawLine(
      Offset(cutOutRect.left, cutOutRect.top + cornerSize),
      Offset(cutOutRect.left, cutOutRect.top),
      borderPaint,
    );
    canvas.drawLine(
      Offset(cutOutRect.left, cutOutRect.top),
      Offset(cutOutRect.left + cornerSize, cutOutRect.top),
      borderPaint,
    );

    // –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª
    canvas.drawLine(
      Offset(cutOutRect.right - cornerSize, cutOutRect.top),
      Offset(cutOutRect.right, cutOutRect.top),
      borderPaint,
    );
    canvas.drawLine(
      Offset(cutOutRect.right, cutOutRect.top),
      Offset(cutOutRect.right, cutOutRect.top + cornerSize),
      borderPaint,
    );

    // –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
    canvas.drawLine(
      Offset(cutOutRect.left, cutOutRect.bottom - cornerSize),
      Offset(cutOutRect.left, cutOutRect.bottom),
      borderPaint,
    );
    canvas.drawLine(
      Offset(cutOutRect.left, cutOutRect.bottom),
      Offset(cutOutRect.left + cornerSize, cutOutRect.bottom),
      borderPaint,
    );

    // –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª
    canvas.drawLine(
      Offset(cutOutRect.right - cornerSize, cutOutRect.bottom),
      Offset(cutOutRect.right, cutOutRect.bottom),
      borderPaint,
    );
    canvas.drawLine(
      Offset(cutOutRect.right, cutOutRect.bottom - cornerSize),
      Offset(cutOutRect.right, cutOutRect.bottom),
      borderPaint,
    );
  }

  @override
  ShapeBorder scale(double t) => QrScannerOverlayShape(
    borderColor: borderColor,
    borderWidth: borderWidth * t,
    overlayColor: overlayColor,
    borderRadius: borderRadius * t,
    borderLength: borderLength * t,
    cutOutSize: cutOutSize * t,
  );
}